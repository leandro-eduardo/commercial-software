/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas_relatorios;

import bd.Conexao;
import componentes.FiltroPesquisa;
import dao.DaoPagamento;
import dao.DaoPessoa;
import dao.DaoRecebimento;
import java.io.InputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.DefaultTableCellRenderer;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import pojo.ParametrosConsulta;
import renderizador.CellRendererData;
import renderizador.InteiroRender;
import renderizador.InteiroRenderCenter;
import renderizador.MonetarioRender;
import renderizador.RenderizadorTexto;
import telas.TelaConsultaFiltro;
import telas.TelaSistema;
import static telas.TelaSistema.jdp;
import util.RestricaoCaracteresRelatorios;
import util.TelaCarregamentoRelatorios;

/**
 *
 * @author leand
 */
public class TelaRelatorioPagamentosRecebimentos extends javax.swing.JInternalFrame {

    public static TelaRelatorioPagamentosRecebimentos tela;

    public ParametrosConsulta parametrosConsulta;

    /**
     * Creates new form TelaRelatorioProduto1
     */
    public TelaRelatorioPagamentosRecebimentos() {
        initComponents();
        jTextFieldCodigo.setDocument(new RestricaoCaracteresRelatorios(100));
        jTextFieldPessoa.setDocument(new RestricaoCaracteresRelatorios(100));
        setFrameIcon(new ImageIcon(this.getClass().getResource("/icones/relatorio.png")));
    }

    public static TelaRelatorioPagamentosRecebimentos getTela() {  //Estático para poder ser chamado de outras classes sem a necessidade de ter criado um objeto anteriormente.
        if (tela == null) {   //Tela não está aberta, pode criar uma nova tela
            tela = new TelaRelatorioPagamentosRecebimentos();
            tela.addInternalFrameListener(new InternalFrameAdapter() { //Adiciona um listener para verificar quando a tela for fechada, fazendo assim a remoção da mesma junto ao JDesktopPane da TelaSistema e setando a variável tela = null para permitir que a tela possa ser aberta novamente em outro momento. Basicamente o mesmo controle efetuado pela tela de pesquisa, porém de uma forma um pouco diferente.
                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    TelaSistema.jdp.remove(tela);
                    tela = null;
                }
            });
            TelaSistema.jdp.add(tela);
        }
        //Depois do teste acima, independentemente dela já existir ou não, ela é selecionada e movida para frente
        TelaSistema.jdp.setSelectedFrame(tela);
        TelaSistema.jdp.moveToFront(tela);
        return tela;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabelDataVcto = new javax.swing.JLabel();
        jButtonImprimir = new javax.swing.JButton();
        jDateChooserDataFinalVcto = new com.toedter.calendar.JDateChooser();
        jLabelPessoa = new javax.swing.JLabel();
        jTextFieldPessoa = new javax.swing.JTextField();
        jLabelOrdenar = new javax.swing.JLabel();
        jComboBoxOrdenar = new javax.swing.JComboBox<>();
        jLabelDataPagto = new javax.swing.JLabel();
        jButtonConsultaPessoa = new javax.swing.JButton();
        jTextFieldCodigo = new javax.swing.JTextField();
        jButtonConsultaCodigo = new javax.swing.JButton();
        jLabelCodigo = new javax.swing.JLabel();
        jDateChooserDataInicialVcto = new com.toedter.calendar.JDateChooser();
        jDateChooserDataInicialPagto = new com.toedter.calendar.JDateChooser();
        jDateChooserDataFinalPagto = new com.toedter.calendar.JDateChooser();
        jComboBoxOrigem = new javax.swing.JComboBox<>();
        jLabelOrigem = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setBorder(null);
        setClosable(true);
        setForeground(java.awt.Color.white);
        setResizable(true);
        setTitle("Relatório de Pagamentos e Recebimentos");
        setMaximumSize(null);
        setMinimumSize(null);

        jLabelDataVcto.setText("Data vencto:");

        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jLabelPessoa.setText("Fornecedor:");

        jTextFieldPessoa.setColumns(10);
        jTextFieldPessoa.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jLabelOrdenar.setText("Ordenar:");

        jComboBoxOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Fornecedor", "Data Vencto", "Data Pagto", "Valor Conta", "Juros", "Desconto", "Valor Recebido" }));
        jComboBoxOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrdenarActionPerformed(evt);
            }
        });

        jLabelDataPagto.setText("Data pagto:");

        jButtonConsultaPessoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaPessoaActionPerformed(evt);
            }
        });

        jTextFieldCodigo.setColumns(10);
        jTextFieldCodigo.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jButtonConsultaCodigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaCodigoActionPerformed(evt);
            }
        });

        jLabelCodigo.setText("Código:");

        jComboBoxOrigem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Contas a Pagar", "Contas a Receber" }));
        jComboBoxOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrigemActionPerformed(evt);
            }
        });

        jLabelOrigem.setText("Origem:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelOrigem, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                .addComponent(jLabelCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelOrdenar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDataPagto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                .addComponent(jLabelPessoa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                .addComponent(jLabelDataVcto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDateChooserDataInicialVcto, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDateChooserDataFinalVcto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDateChooserDataInicialPagto, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDateChooserDataFinalPagto, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonConsultaCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDateChooserDataFinalVcto, jDateChooserDataInicialVcto});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldCodigo, jTextFieldPessoa});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonConsultaCodigo, jButtonConsultaPessoa});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrigem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxOrigem))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonConsultaCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldPessoa)
                        .addComponent(jLabelPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserDataInicialVcto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserDataFinalVcto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDataVcto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDataPagto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserDataInicialPagto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserDataFinalPagto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxOrdenar))
                .addGap(15, 15, 15)
                .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaPessoa, jTextFieldPessoa});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jDateChooserDataFinalPagto, jDateChooserDataInicialPagto});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jDateChooserDataFinalVcto, jDateChooserDataInicialVcto});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaCodigo, jTextFieldCodigo});

        setBounds(0, 0, 490, 339);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed

        //verifica se o último dígito dos campos é uma virgula. Se for, ela é removida para não dar conflito com a String do SQL
        if (jTextFieldCodigo.getText().endsWith(",")) {
            jTextFieldCodigo.setText(jTextFieldCodigo.getText().substring(0, jTextFieldCodigo.getText().length() - 1));
        }
        if (jTextFieldPessoa.getText().endsWith(",")) {
            jTextFieldPessoa.setText(jTextFieldPessoa.getText().substring(0, jTextFieldPessoa.getText().length() - 1));
        }

        //Abertura do diálogo de confirmação para o usuário
        int confirma = JOptionPane.showConfirmDialog(null, "Confirma a impressão?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (confirma == JOptionPane.YES_OPTION) {

            //Abertura da tela de carregamento
            TelaCarregamentoRelatorios telaCarregamento = new TelaCarregamentoRelatorios();
            jdp.add(telaCarregamento);
            telaCarregamento.setVisible(true);

            //Criação da thread que gera o relatório, que apesar de iniciada aguarda a execução da threadCarregamento
            Thread threadGerarRelatorio = new Thread() {
                public void run() {
                    try {
                        //Nesse momento a threadCarregamento é solicitada e a threadGerarRelatório é interrompida
                        //até que a threadCarregamento seja totalmente executada.
                        telaCarregamento.threadCarregamento.join();
                        //A threadGerarRelatorio fica 1 segundo "parada" para que o usuário observe que o relatório foi
                        //totalmente carregado
                        sleep(1000);
                        //Depois desse 1 segundo, a tela de carregamento é fechada, indicando o término total do carregamento
                        //do relatório
                        telaCarregamento.dispose();

                        //Imprimindo o relatório
                        //Caminho absoluto comentado para utilizar o caminho relativo que pega os arquivo da pasta src do projeto
                        //String caminhoRelatorio = System.getProperty("user.dir") + "/JasperReports/RelatorioPagamentosRecebimentos.jasper";/*"C:\\Users\\leand\\JaspersoftWorkspace\\MyReports\\RelatorioProdutos.jasper";*/
                        //Caminho relativo
                        InputStream caminhoRelatorio = getClass().getResourceAsStream("/relatorios/RelatorioPagamentosRecebimentos.jasper");
                        JasperPrint jasperPrint = null;

                        //Lista com os parametros para o relátorio
                        HashMap parametros = new HashMap<>();

                        String parametro;

                        switch (jComboBoxOrigem.getSelectedIndex()) {
                            case 0://rotina do relatório de contas a pagar (pagamento)
                                //Passando parâmetros e convertendo os dados pra ser compativel
                                parametro = "SELECT PAGAMENTO.ID, PESSOA.NOMERAZAOSOCIAL AS PESSOANOME, PARCELACONTAPAGAR.ID AS IDPARCELA, PARCELACONTAPAGAR.VENCIMENTO AS DATAVENCTO,\n"
                                        + "PAGAMENTO.DATA AS DATARCBTO, PARCELACONTAPAGAR.VALOR AS VALORCONTA, PAGAMENTO.DESCONTO AS VALORDESCONTO, SUM(PAGAMENTO.JUROS + PAGAMENTO.MULTA) AS JUROSMULTA, PAGAMENTO.VALORTOTAL AS VALORPAGO_RECEBIDO\n"
                                        + "FROM PAGAMENTO\n"
                                        + "LEFT JOIN PARCELACONTAPAGAR ON PARCELACONTAPAGAR.ID = PAGAMENTO.IDPARCELACONTAPAGAR\n"
                                        + "LEFT JOIN CONTAPAGAR ON CONTAPAGAR.ID = PARCELACONTAPAGAR.IDCONTAPAGAR\n"
                                        + "LEFT JOIN PESSOA ON PESSOA.ID = CONTAPAGAR.IDPESSOA WHERE ";

                                if (!jTextFieldCodigo.getText().trim().isEmpty()) {
                                    parametro = parametro + "PAGAMENTO.ID IN (" + jTextFieldCodigo.getText() + ") AND ";
                                }

                                if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                                    parametro = parametro + "IDPESSOA IN (" + jTextFieldPessoa.getText() + ") AND ";
                                }

                                if (jDateChooserDataInicialVcto.getDate() == null) {
                                    parametro = parametro + "PARCELACONTAPAGAR.VENCIMENTO BETWEEN '01.01.1900' AND ";
                                } else {
                                    parametro = parametro + "PARCELACONTAPAGAR.VENCIMENTO BETWEEN '" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicialVcto.getDate()) + "' AND ";
                                }

                                if (jDateChooserDataFinalVcto.getDate() == null) {
                                    parametro = parametro + "'01.01.2999' AND ";
                                } else {
                                    parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataFinalVcto.getDate()) + "' AND ";
                                }

                                if (jDateChooserDataInicialPagto.getDate() == null) {
                                    parametro = parametro + "PAGAMENTO.DATA BETWEEN '01.01.1900' AND ";
                                } else {
                                    parametro = parametro + "PAGAMENTO.DATA BETWEEN '" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicialPagto.getDate()) + "' AND ";
                                }

                                if (jDateChooserDataFinalPagto.getDate() == null) {
                                    parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(new Date()) + "' AND ";
                                } else {
                                    parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicialPagto.getDate()) + "' AND ";
                                }

                                parametro = parametro + "0=0 ";

                                parametro = parametro + "GROUP BY PAGAMENTO.ID, PESSOANOME, IDPARCELA, DATAVENCTO, DATARCBTO, VALORCONTA, VALORDESCONTO, VALORPAGO_RECEBIDO";

                                switch (jComboBoxOrdenar.getSelectedIndex()) {
                                    case 0:
                                        parametro = parametro + " ORDER BY PAGAMENTO.ID";
                                        break;
                                    case 1:
                                        parametro = parametro + " ORDER BY PESSOANOME";
                                        break;
                                    case 2:
                                        parametro = parametro + " ORDER BY PARCELACONTAPAGAR.VENCIMENTO";
                                        break;
                                    case 3:
                                        parametro = parametro + " ORDER BY PAGAMENTO.DATA";
                                        break;
                                    case 4:
                                        parametro = parametro + " ORDER BY VALORCONTA";
                                        break;
                                    case 5:
                                        parametro = parametro + " ORDER BY JUROSMULTA";
                                        break;
                                    case 6:
                                        parametro = parametro + " ORDER BY VALORDESCONTO";
                                        break;
                                    case 7:
                                        parametro = parametro + " ORDER BY VALORPAGO_RECEBIDO";
                                        break;
                                }

                                parametros.put("SQL", parametro);
                                parametros.put("ORIGEM", "CP");
                                parametros.put("ID", jTextFieldCodigo.getText());
                                parametros.put("IDPESSOA", jTextFieldPessoa.getText());
                                parametros.put("ORDENACAO", jComboBoxOrdenar.getSelectedItem());
                                parametros.put("DATA_INICIAL_VENCTO", jDateChooserDataInicialVcto.getDate());
                                parametros.put("DATA_FINAL_VENCTO", jDateChooserDataFinalVcto.getDate());
                                parametros.put("DATA_INICIAL_PAGTO", jDateChooserDataInicialPagto.getDate());
                                parametros.put("DATA_FINAL_PAGTO", jDateChooserDataFinalPagto.getDate());

                                System.out.println("PRINTA AI SQL = " + parametro);
                                try {
                                    jasperPrint = JasperFillManager.fillReport(caminhoRelatorio, parametros, Conexao.getConexao());
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    JOptionPane.showMessageDialog(rootPane, "Erro ao gerar o relatório - " + e);
                                }
                                break;
                            case 1: //rotina do relatório de contas a receber (recebimento)
                                //Passando parâmetros e convertendo os dados pra ser compativel
                                parametro = "SELECT RECEBIMENTO.ID, PESSOA.NOMERAZAOSOCIAL AS PESSOANOME, PARCELACONTARECEBER.ID AS IDPARCELA, PARCELACONTARECEBER.VENCIMENTO AS DATAVENCTO,\n"
                                        + "RECEBIMENTO.DATA AS DATARCBTO, PARCELACONTARECEBER.VALOR AS VALORCONTA, RECEBIMENTO.DESCONTO AS VALORDESCONTO, SUM(RECEBIMENTO.JUROS + RECEBIMENTO.MULTA) AS JUROSMULTA, RECEBIMENTO.VALORTOTAL AS VALORPAGO_RECEBIDO\n"
                                        + "FROM RECEBIMENTO\n"
                                        + "LEFT JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                        + "LEFT JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.IDCONTARECEBER\n"
                                        + "LEFT JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA WHERE ";

                                if (!jTextFieldCodigo.getText().trim().isEmpty()) {
                                    parametro = parametro + "RECEBIMENTO.ID IN (" + jTextFieldCodigo.getText() + ") AND ";
                                }

                                if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                                    parametro = parametro + "IDPESSOA IN (" + jTextFieldPessoa.getText() + ") AND ";
                                }

                                if (jDateChooserDataInicialVcto.getDate() == null) {
                                    parametro = parametro + "PARCELACONTARECEBER.VENCIMENTO BETWEEN '01.01.1900' AND ";
                                } else {
                                    parametro = parametro + "PARCELACONTARECEBER.VENCIMENTO BETWEEN '" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicialVcto.getDate()) + "' AND ";
                                }

                                if (jDateChooserDataFinalVcto.getDate() == null) {
                                    parametro = parametro + "'01.01.2999' AND ";
                                } else {
                                    parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataFinalVcto.getDate()) + "' AND ";
                                }

                                if (jDateChooserDataInicialPagto.getDate() == null) {
                                    parametro = parametro + "RECEBIMENTO.DATA BETWEEN '01.01.1900' AND ";
                                } else {
                                    parametro = parametro + "RECEBIMENTO.DATA BETWEEN '" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicialPagto.getDate()) + "' AND ";
                                }

                                if (jDateChooserDataFinalPagto.getDate() == null) {
                                    parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(new Date()) + "' AND ";
                                } else {
                                    parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicialPagto.getDate()) + "' AND ";
                                }

                                parametro = parametro + "0=0 ";

                                parametro = parametro + "GROUP BY RECEBIMENTO.ID, PESSOANOME, IDPARCELA, DATAVENCTO, DATARCBTO, VALORCONTA, VALORDESCONTO, VALORPAGO_RECEBIDO";

                                switch (jComboBoxOrdenar.getSelectedIndex()) {
                                    case 0:
                                        parametro = parametro + " ORDER BY RECEBIMENTO.ID";
                                        break;
                                    case 1:
                                        parametro = parametro + " ORDER BY PESSOANOME";
                                        break;
                                    case 2:
                                        parametro = parametro + " ORDER BY PARCELACONTARECEBER.VENCIMENTO";
                                        break;
                                    case 3:
                                        parametro = parametro + " ORDER BY RECEBIMENTO.DATA";
                                        break;
                                    case 4:
                                        parametro = parametro + " ORDER BY VALORCONTA";
                                        break;
                                    case 5:
                                        parametro = parametro + " ORDER BY JUROSMULTA";
                                        break;
                                    case 6:
                                        parametro = parametro + " ORDER BY VALORDESCONTO";
                                        break;
                                    case 7:
                                        parametro = parametro + " ORDER BY VALORPAGO_RECEBIDO";
                                        break;
                                }

                                parametros.put("SQL", parametro);
                                parametros.put("ORIGEM", "CR");
                                parametros.put("ID", jTextFieldCodigo.getText());
                                parametros.put("IDPESSOA", jTextFieldPessoa.getText());
                                parametros.put("ORDENACAO", jComboBoxOrdenar.getSelectedItem());
                                parametros.put("DATA_INICIAL_VENCTO", jDateChooserDataInicialVcto.getDate());
                                parametros.put("DATA_FINAL_VENCTO", jDateChooserDataFinalVcto.getDate());
                                parametros.put("DATA_INICIAL_PAGTO", jDateChooserDataInicialPagto.getDate());
                                parametros.put("DATA_FINAL_PAGTO", jDateChooserDataFinalPagto.getDate());

                                System.out.println("PRINTA AI SQL = " + parametro);
                                try {
                                    jasperPrint = JasperFillManager.fillReport(caminhoRelatorio, parametros, Conexao.getConexao());
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    JOptionPane.showMessageDialog(rootPane, "Erro ao gerar o relatório - " + e);
                                }
                                break;

                        }

                        //Relatório finalmente é exibido na tela para o usuário
                        JasperViewer jv = new JasperViewer(jasperPrint, false);
                        URL iconReportURL = getClass().getResource("/icones/relatorio.png");
                        ImageIcon icon = new ImageIcon(iconReportURL);
                        jv.setIconImage(icon.getImage());
                        jv.setTitle("Relatório");
                        jv.setVisible(true);

                    } catch (InterruptedException ex) {
                        Logger.getLogger(TelaRelatorioPagamentosRecebimentos.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            };
            telaCarregamento.threadCarregamento.start();
            threadGerarRelatorio.start();
        }
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jComboBoxOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrdenarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxOrdenarActionPerformed

    private void jButtonConsultaPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaPessoaActionPerformed
        if (jComboBoxOrigem.getSelectedIndex() == 0) { //se for igual a 0 significa que é a origem é CP ContaPagar
            new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Fornecedor para Relatório",
                    DaoPessoa.SQLPESQUISARFORNECEDORES,
                    new String[]{"Código", "Nome", "CPF/CNPJ", "Cidade", "Situação"},
                    new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                        new FiltroPesquisa("Nome", "NOMERAZAOSOCIAL", String.class),
                        new FiltroPesquisa("CPF/CNPJ", "CPFCNPJ", String.class),
                        new FiltroPesquisa("Cidade", "CIDADE", String.class),
                        new FiltroPesquisa("Situação", "ATIVO", String.class)
                    },
                    new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new RenderizadorTexto(),
                        new RenderizadorTexto(), new RenderizadorTexto()
                    },
                    this, this, false, false, false)
            );
        } else { //se não, significa que é a origem é CR ContaReceber
            new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Cliente para Relatório",
                    DaoPessoa.SQLPESQUISARCLIENTES,
                    new String[]{"Código", "Nome", "CPF/CNPJ", "Cidade", "Situação"},
                    new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                        new FiltroPesquisa("Nome", "NOMERAZAOSOCIAL", String.class),
                        new FiltroPesquisa("CPF/CNPJ", "CPFCNPJ", String.class),
                        new FiltroPesquisa("Cidade", "CIDADE", String.class),
                        new FiltroPesquisa("Situação", "ATIVO", String.class)
                    },
                    new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new RenderizadorTexto(),
                        new RenderizadorTexto(), new RenderizadorTexto()
                    },
                    this, this, false, false, false)
            );
        }
    }//GEN-LAST:event_jButtonConsultaPessoaActionPerformed

    private void jButtonConsultaCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaCodigoActionPerformed
        if (jComboBoxOrigem.getSelectedIndex() == 0) { //se for igual a 0 significa que é a origem é CP ContaPagar
            new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Pagamentos para Relatório",
                    DaoPagamento.SQLPESQUISAR,
                    new String[]{"Código", "Fornecedor", "Nº Conta", "Data", "Valor", "Juros", "Multa", "Valor Líquido"},
                    new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                        new FiltroPesquisa("Fornecedor", "PESSOA_NOME", String.class),
                        new FiltroPesquisa("Nº Conta", "PARCELACONTAPAGAR_ID", String.class),
                        new FiltroPesquisa("Data", "DATA", Date.class),
                        new FiltroPesquisa("Valor", "VALOR", String.class),
                        new FiltroPesquisa("Juros", "JUROS", String.class),
                        new FiltroPesquisa("Multa", "MULTA", String.class),
                        new FiltroPesquisa("Valor Líquido", "VALORTOTAL", String.class),},
                    new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new InteiroRenderCenter(),
                        new CellRendererData(), new MonetarioRender(), new MonetarioRender(), new MonetarioRender(), new MonetarioRender(),},
                    this, this, true, false, false)
            );
        } else { //se não, significa que é a origem é CR ContaReceber
            new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Recebimentos para Relatório",
                    DaoRecebimento.SQLPESQUISAR,
                    new String[]{"Código", "Fornecedor", "Nº Conta", "Data", "Valor", "Juros", "Multa", "Valor Líquido"},
                    new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                        new FiltroPesquisa("Fornecedor", "PESSOA_NOME", String.class),
                        new FiltroPesquisa("Nº Conta", "PARCELACONTARECEBER_ID", String.class),
                        new FiltroPesquisa("Data", "DATA", Date.class),
                        new FiltroPesquisa("Valor", "VALOR", String.class),
                        new FiltroPesquisa("Juros", "JUROS", String.class),
                        new FiltroPesquisa("Multa", "MULTA", String.class),
                        new FiltroPesquisa("Valor Líquido", "VALORTOTAL", String.class),},
                    new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new InteiroRenderCenter(),
                        new CellRendererData(), new MonetarioRender(), new MonetarioRender(), new MonetarioRender(), new MonetarioRender(),},
                    this, this, true, false, false)
            );
        }

    }//GEN-LAST:event_jButtonConsultaCodigoActionPerformed

    private void jComboBoxOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrigemActionPerformed
        if (jComboBoxOrigem.getSelectedIndex() == 0) { //se o index for = 0, a origem é CP ContaPagar
            jLabelPessoa.setText("Fornecedor:");
            jTextFieldCodigo.setText("");
            jTextFieldPessoa.setText("");
            jDateChooserDataInicialVcto.setDate(null);
            jDateChooserDataFinalVcto.setDate(null);
            jDateChooserDataInicialPagto.setDate(null);
            jDateChooserDataFinalPagto.setDate(null);
            jComboBoxOrdenar.removeAllItems();
            String[] items = {"Código", "Fornecedor", "Data Vencto", "Data Pagto", "Valor Conta", "Juros", "Desconto", "Valor Pago"};
            for (int i = 0; i < items.length; i++) {
                jComboBoxOrdenar.addItem(items[i]);
            }
            jComboBoxOrdenar.setSelectedIndex(0);
        } else { //se não, a origem é CR ContaReceber
            jLabelPessoa.setText("Cliente:");
            jTextFieldCodigo.setText("");
            jTextFieldPessoa.setText("");
            jDateChooserDataInicialVcto.setDate(null);
            jDateChooserDataFinalVcto.setDate(null);
            jDateChooserDataInicialPagto.setDate(null);
            jDateChooserDataFinalPagto.setDate(null);
            jComboBoxOrdenar.removeAllItems();
            String[] items = {"Código", "Cliente", "Data Vencto", "Data Pagto", "Valor Conta", "Juros", "Desconto", "Valor Recebido"};
            for (int i = 0; i < items.length; i++) {
                jComboBoxOrdenar.addItem(items[i]);
            }
            jComboBoxOrdenar.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jComboBoxOrigemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConsultaCodigo;
    private javax.swing.JButton jButtonConsultaPessoa;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JComboBox<String> jComboBoxOrdenar;
    private javax.swing.JComboBox<String> jComboBoxOrigem;
    private com.toedter.calendar.JDateChooser jDateChooserDataFinalPagto;
    private com.toedter.calendar.JDateChooser jDateChooserDataFinalVcto;
    private com.toedter.calendar.JDateChooser jDateChooserDataInicialPagto;
    private com.toedter.calendar.JDateChooser jDateChooserDataInicialVcto;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelDataPagto;
    private javax.swing.JLabel jLabelDataVcto;
    private javax.swing.JLabel jLabelOrdenar;
    private javax.swing.JLabel jLabelOrigem;
    private javax.swing.JLabel jLabelPessoa;
    public javax.swing.JTextField jTextFieldCodigo;
    public javax.swing.JTextField jTextFieldPessoa;
    // End of variables declaration//GEN-END:variables

}
