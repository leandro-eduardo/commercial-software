/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas_relatorios;

import bd.Conexao;
import componentes.FiltroPesquisa;
import dao.DaoPessoa;
import java.io.InputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.DefaultTableCellRenderer;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import pojo.ParametrosConsulta;
import renderizador.InteiroRender;
import renderizador.RenderizadorTexto;
import telas.TelaConsultaFiltro;
import telas.TelaSistema;
import static telas.TelaSistema.jdp;
import util.RestricaoCaracteresRelatorios;
import util.TelaCarregamentoRelatorios;

/**
 *
 * @author leand
 */
public class TelaRelatorioIndicadoresRecebimento extends javax.swing.JInternalFrame {

    public static TelaRelatorioIndicadoresRecebimento tela;

    public ParametrosConsulta parametrosConsulta;

    /**
     * Creates new form TelaRelatorioProduto1
     */
    public TelaRelatorioIndicadoresRecebimento() {
        initComponents();
        jTextFieldPessoa.setDocument(new RestricaoCaracteresRelatorios(100));
        setFrameIcon(new ImageIcon(this.getClass().getResource("/icones/relatorio.png")));
    }

    public static TelaRelatorioIndicadoresRecebimento getTela() {  //Estático para poder ser chamado de outras classes sem a necessidade de ter criado um objeto anteriormente.
        if (tela == null) {   //Tela não está aberta, pode criar uma nova tela
            tela = new TelaRelatorioIndicadoresRecebimento();
            tela.addInternalFrameListener(new InternalFrameAdapter() { //Adiciona um listener para verificar quando a tela for fechada, fazendo assim a remoção da mesma junto ao JDesktopPane da TelaSistema e setando a variável tela = null para permitir que a tela possa ser aberta novamente em outro momento. Basicamente o mesmo controle efetuado pela tela de pesquisa, porém de uma forma um pouco diferente.
                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    TelaSistema.jdp.remove(tela);
                    tela = null;
                }
            });
            TelaSistema.jdp.add(tela);
        }
        //Depois do teste acima, independentemente dela já existir ou não, ela é selecionada e movida para frente
        TelaSistema.jdp.setSelectedFrame(tela);
        TelaSistema.jdp.moveToFront(tela);
        return tela;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabelData = new javax.swing.JLabel();
        jButtonImprimir = new javax.swing.JButton();
        jDateChooserDataInicial = new com.toedter.calendar.JDateChooser();
        jLabelPessoa = new javax.swing.JLabel();
        jTextFieldPessoa = new javax.swing.JTextField();
        jDateChooserDataFinal = new com.toedter.calendar.JDateChooser();
        jButtonConsultaPessoa = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setBorder(null);
        setClosable(true);
        setForeground(java.awt.Color.white);
        setTitle("Relatório Indicadores de Recebimentos");
        setMaximumSize(null);
        setMinimumSize(null);

        jLabelData.setText("Data:");

        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jLabelPessoa.setText("Cliente:");

        jTextFieldPessoa.setColumns(10);
        jTextFieldPessoa.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");
        jTextFieldPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPessoaActionPerformed(evt);
            }
        });

        jButtonConsultaPessoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaPessoaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelPessoa, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(jLabelData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDateChooserDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(jDateChooserDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDateChooserDataFinal, jDateChooserDataInicial});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldPessoa)
                            .addComponent(jLabelPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooserDataInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jDateChooserDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaPessoa, jTextFieldPessoa});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jDateChooserDataFinal, jDateChooserDataInicial});

        setBounds(0, 0, 490, 186);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed

        //verifica se o último dígito dos campos é uma virgula. Se for, ela é removida para não dar conflito com a String do SQL
        if (jTextFieldPessoa.getText().endsWith(",")) {
            jTextFieldPessoa.setText(jTextFieldPessoa.getText().substring(0, jTextFieldPessoa.getText().length() - 1));
        }

        int confirma = JOptionPane.showConfirmDialog(null, "Confirma a impressão?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (confirma == JOptionPane.YES_OPTION) {

            //Abertura da tela de carregamento
            TelaCarregamentoRelatorios telaCarregamento = new TelaCarregamentoRelatorios();
            jdp.add(telaCarregamento);
            telaCarregamento.setVisible(true);

            //Criação da thread que gera o relatório, que apesar de iniciada aguarda a execução da threadCarregamento
            Thread threadGerarRelatorio = new Thread() {
                public void run() {
                    try {
                        //Nesse momento a threadCarregamento é solicitada e a threadGerarRelatório é interrompida
                        //até que a threadCarregamento seja totalmente executada.
                        telaCarregamento.threadCarregamento.join();
                        //A threadGerarRelatorio fica 1 segundo "parada" para que o usuário observe que o relatório foi
                        //totalmente carregado
                        sleep(1000);
                        //Depois desse 1 segundo, a tela de carregamento é fechada, indicando o término total do carregamento
                        //do relatório
                        telaCarregamento.dispose();

                        //Imprimindo o relatório
                        //Caminho absoluto comentado para utilizar o caminho relativo que pega os arquivo da pasta src do projeto
                        //String caminhoRelatorio = System.getProperty("user.dir") + "/JasperReports/RelatorioIndicadoresRecebimento.jasper";/*"C:\\Users\\leand\\JaspersoftWorkspace\\MyReports\\RelatorioProdutos.jasper";*/

                        //Caminho relativo
                        InputStream caminhoRelatorio = getClass().getResourceAsStream("/relatorios/RelatorioIndicadoresRecebimento.jasper");
                        JasperPrint jasperPrint = null;

                        //Lista com os parametros para o relátorio
                        HashMap parametros = new HashMap<>();

                        //Passando parâmetros e convertendo os dados pra ser compativel
                        String parametro = "SELECT PESSOA.ID AS IDCLIENTE, PARCELACONTARECEBER.ID, PARCELACONTARECEBER.valor, RECEBIMENTO.valortotal, parcelacontareceber.VENCIMENTO,\n"
                                + "RECEBIMENTO.DATA FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento >= RECEBIMENTO.data AND ";

                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametro = parametro + "IDPESSOA IN (" + jTextFieldPessoa.getText() + ") AND ";
                        }

                        if (jDateChooserDataInicial.getDate() == null) {
                            parametro = parametro + "RECEBIMENTO.DATA BETWEEN '01.01.1900' AND ";
                        } else {
                            parametro = parametro + "RECEBIMENTO.DATA BETWEEN '" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicial.getDate()) + "' AND ";
                        }

                        if (jDateChooserDataFinal.getDate() == null) {
                            parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(new Date()) + "' AND ";
                        } else {
                            parametro = parametro + "'" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataFinal.getDate()) + "' AND ";
                        }

                        parametro = parametro + "0=0 ";

                        //parametro SQL para o preenchimento do gráfico
                        String dataInicial;
                        String dataFinal;
                        if (jDateChooserDataInicial.getDate() == null) {
                            dataInicial = "'01.01.1900'";
                        } else {
                            dataInicial = "'" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataInicial.getDate()) + "'";
                        }

                        if (jDateChooserDataFinal.getDate() == null) {
                            dataFinal = "'" + new SimpleDateFormat("dd.MM.yyyy").format(new Date()) + "'";
                        } else {
                            dataFinal = "'" + new SimpleDateFormat("dd.MM.yyyy").format(jDateChooserDataFinal.getDate()) + "'";
                        }

                        String parametroChartDataset = "select FIRST 1\n"
                                + "(SELECT COUNT(PARCELACONTARECEBER.ID) FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento < RECEBIMENTO.data\n"
                                + "AND RECEBIMENTO.DATA BETWEEN " + dataInicial + " AND " + dataFinal + "\n";
                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametroChartDataset = parametroChartDataset + "AND IDPESSOA IN (" + jTextFieldPessoa.getText() + ")";
                        }
                        parametroChartDataset = parametroChartDataset + ") AS CONTASPAGASFORADOPRAZO,\n"
                                + "(SELECT COUNT(PARCELACONTARECEBER.ID) FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento >= RECEBIMENTO.data\n"
                                + "AND RECEBIMENTO.DATA BETWEEN " + dataInicial + " AND " + dataFinal + "\n";
                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametroChartDataset = parametroChartDataset + "AND IDPESSOA IN (" + jTextFieldPessoa.getText() + ")";
                        }
                        parametroChartDataset = parametroChartDataset + ")  AS CONTASPAGASNOPRAZO,\n"
                                + "(SELECT COUNT(PARCELACONTARECEBER.ID) FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento >= RECEBIMENTO.data) +\n"
                                + "(SELECT COUNT(PARCELACONTARECEBER.ID) FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento < RECEBIMENTO.data\n"
                                + "AND RECEBIMENTO.DATA BETWEEN " + dataInicial + " AND " + dataFinal + "\n";
                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametroChartDataset = parametroChartDataset + "AND IDPESSOA IN (" + jTextFieldPessoa.getText() + ")";
                        }
                        parametroChartDataset = parametroChartDataset + ") AS SOMATOTAL\n"
                                + "FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento >= RECEBIMENTO.data";
                        //fim da rotina de parametro SQL para o preenchimento do gráfico

                        //parametro SQL para o preenchimento do subreport 1
                        String parametroSubReport1 = "SELECT PARCELACONTARECEBER.ID, PESSOA.ID AS IDCLIENTE, PESSOA.ID || ' - ' || PESSOA.NOMERAZAOSOCIAL AS IDNOMEPESSOA, PARCELACONTARECEBER.valor, RECEBIMENTO.valortotal, parcelacontareceber.VENCIMENTO,\n"
                                + "RECEBIMENTO.DATA FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento >= RECEBIMENTO.data\n"
                                + "AND RECEBIMENTO.DATA BETWEEN " + dataInicial + " AND " + dataFinal + "\n";
                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametroSubReport1 = parametroSubReport1 + "AND IDPESSOA IN (" + jTextFieldPessoa.getText() + ")";
                        }
                        //fim darotina de parametro SQL para o preenchimento do subreport 2

                        //parametro SQL para o preenchimento do subreport 2
                        String parametroSubReport2 = "SELECT PARCELACONTARECEBER.ID, PESSOA.ID AS IDCLIENTE, PESSOA.ID || ' - ' || PESSOA.NOMERAZAOSOCIAL AS IDNOMEPESSOA, PARCELACONTARECEBER.valor, RECEBIMENTO.valortotal, parcelacontareceber.VENCIMENTO,\n"
                                + "RECEBIMENTO.DATA FROM recebimento\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.ID = RECEBIMENTO.IDPARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.IDPESSOA\n"
                                + "WHERE PARCELACONTARECEBER.vencimento < RECEBIMENTO.data\n"
                                + "AND RECEBIMENTO.DATA BETWEEN " + dataInicial + " AND " + dataFinal + "\n";
                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametroSubReport2 = parametroSubReport2 + "AND IDPESSOA IN (" + jTextFieldPessoa.getText() + ")";
                        }
                        //fim darotina de parametro SQL para o preenchimento do subreport 3

                        //parametro SQL para o preenchimento do subreport 3
                        String parametroSubReport3 = "SELECT PARCELACONTARECEBER.ID, PESSOA.ID || ' - ' || PESSOA.NOMERAZAOSOCIAL AS IDNOMEPESSOA, CONTARECEBER.id AS IDCONTARECEBER,  PARCELACONTARECEBER.valorpendente, PARCELACONTARECEBER.PARCELAS, parcelacontareceber.VENCIMENTO\n"
                                + "FROM PARCELACONTARECEBER\n"
                                + "INNER JOIN CONTARECEBER ON CONTARECEBER.ID = PARCELACONTARECEBER.idcontareceber\n"
                                + "INNER JOIN PESSOA ON PESSOA.ID = CONTARECEBER.idpessoa\n"
                                + "WHERE PARCELACONTARECEBER.quitada <> 'S'\n";
                               if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametroSubReport3 = parametroSubReport3 + "AND IDPESSOA IN (" + jTextFieldPessoa.getText() + ")";
                        }
                        //fim darotina de parametro SQL para o preenchimento do subreport 1

                        parametros.put("SQL", parametro);
                        
                        //Caminho relativo do sub relatório 1
                        URL caminhoSubRelatorio1 = getClass().getResource("/relatorios/subrelatorios/SubRelatorioIndicadoresRecbtosPrazo.jasper");
                        parametros.put("SUBREPORT1_DIR", caminhoSubRelatorio1);

                        //Caminho relativo do sub relatório 2
                        URL caminhoSubRelatorio2 = getClass().getResource("/relatorios/subrelatorios/SubRelatorioIndicadoresRecbtosForaPrazo.jasper");
                        parametros.put("SUBREPORT2_DIR", caminhoSubRelatorio2);
                        
                        //Caminho relativo do sub relatório 3
                        URL caminhoSubRelatorio3 = getClass().getResource("/relatorios/subrelatorios/SubRelatorioIndicadoresRecbtosPendentes.jasper");
                        parametros.put("SUBREPORT3_DIR", caminhoSubRelatorio3);
                        
                        parametros.put("CHARTSQL", parametroChartDataset);
                        parametros.put("SQLSUBREPORT1", parametroSubReport1);
                        parametros.put("SQLSUBREPORT2", parametroSubReport2);
                        parametros.put("SQLSUBREPORT3", parametroSubReport3);
                        parametros.put("IDCLIENTE", jTextFieldPessoa.getText());
                        parametros.put("DATA_INICIAL", jDateChooserDataInicial.getDate());
                        parametros.put("DATA_FINAL", jDateChooserDataFinal.getDate());

                        System.out.println("PRINTA AI SQL = " + parametro);
                        System.out.println("\n\n\n\nPRINTA AI CHARTSQL = " + parametroChartDataset);
                        System.out.println("\n\n\n\nPRINTA AI parametroSubReport1 = " + parametroSubReport1);
                        System.out.println("\n\n\n\nPRINTA AI parametroSubReport2 = " + parametroSubReport2);
                        System.out.println("\n\n\n\nPRINTA AI parametroSubReport3 = " + parametroSubReport3);
                        try {
                            jasperPrint = JasperFillManager.fillReport(caminhoRelatorio, parametros, Conexao.getConexao());
                        } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(rootPane, "Erro ao gerar o relatório - " + e);
                        }

                        //Relatório finalmente é exibido na tela para o usuário
                        JasperViewer jv = new JasperViewer(jasperPrint, false);
                        URL iconReportURL = getClass().getResource("/icones/relatorio.png");
                        ImageIcon icon = new ImageIcon(iconReportURL);
                        jv.setIconImage(icon.getImage());
                        jv.setTitle("Relatório");
                        jv.setVisible(true);

                    } catch (InterruptedException ex) {
                        Logger.getLogger(TelaRelatorioIndicadoresRecebimento.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            };
            telaCarregamento.threadCarregamento.start();
            threadGerarRelatorio.start();
        }
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jButtonConsultaPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaPessoaActionPerformed
        new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Cliente para Relatório",
                DaoPessoa.SQLPESQUISARCLIENTES,
                new String[]{"Código", "Nome", "CPF/CNPJ", "Cidade", "Situação"},
                new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                    new FiltroPesquisa("Nome", "NOMERAZAOSOCIAL", String.class),
                    new FiltroPesquisa("CPF/CNPJ", "CPFCNPJ", String.class),
                    new FiltroPesquisa("Cidade", "CIDADE", String.class),
                    new FiltroPesquisa("Situação", "ATIVO", String.class)
                },
                new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new RenderizadorTexto(),
                    new RenderizadorTexto(), new RenderizadorTexto()
                },
                this, this, false, false, false)
        );
    }//GEN-LAST:event_jButtonConsultaPessoaActionPerformed

    private void jTextFieldPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPessoaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPessoaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConsultaPessoa;
    private javax.swing.JButton jButtonImprimir;
    private com.toedter.calendar.JDateChooser jDateChooserDataFinal;
    private com.toedter.calendar.JDateChooser jDateChooserDataInicial;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelPessoa;
    public javax.swing.JTextField jTextFieldPessoa;
    // End of variables declaration//GEN-END:variables

}
