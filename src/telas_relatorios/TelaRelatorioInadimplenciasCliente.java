/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas_relatorios;

import bd.Conexao;
import componentes.FiltroPesquisa;
import dao.DaoPessoa;
import java.io.InputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.DefaultTableCellRenderer;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import pojo.ParametrosConsulta;
import renderizador.InteiroRender;
import renderizador.RenderizadorTexto;
import telas.TelaConsultaFiltro;
import telas.TelaSistema;
import static telas.TelaSistema.jdp;
import util.RestricaoCaracteresRelatorios;
import util.TelaCarregamentoRelatorios;

/**
 *
 * @author leand
 */
public class TelaRelatorioInadimplenciasCliente extends javax.swing.JInternalFrame {

    public static TelaRelatorioInadimplenciasCliente tela;

    public ParametrosConsulta parametrosConsulta;

    /**
     * Creates new form TelaRelatorioProduto1
     */
    public TelaRelatorioInadimplenciasCliente() {
        initComponents();
        jTextFieldPessoa.setDocument(new RestricaoCaracteresRelatorios(100));
        setFrameIcon(new ImageIcon(this.getClass().getResource("/icones/relatorio.png")));
    }

    public static TelaRelatorioInadimplenciasCliente getTela() {  //Estático para poder ser chamado de outras classes sem a necessidade de ter criado um objeto anteriormente.
        if (tela == null) {   //Tela não está aberta, pode criar uma nova tela
            tela = new TelaRelatorioInadimplenciasCliente();
            tela.addInternalFrameListener(new InternalFrameAdapter() { //Adiciona um listener para verificar quando a tela for fechada, fazendo assim a remoção da mesma junto ao JDesktopPane da TelaSistema e setando a variável tela = null para permitir que a tela possa ser aberta novamente em outro momento. Basicamente o mesmo controle efetuado pela tela de pesquisa, porém de uma forma um pouco diferente.
                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    TelaSistema.jdp.remove(tela);
                    tela = null;
                }
            });
            TelaSistema.jdp.add(tela);
        }
        //Depois do teste acima, independentemente dela já existir ou não, ela é selecionada e movida para frente
        TelaSistema.jdp.setSelectedFrame(tela);
        TelaSistema.jdp.moveToFront(tela);
        return tela;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonImprimir = new javax.swing.JButton();
        jLabelPessoa = new javax.swing.JLabel();
        jTextFieldPessoa = new javax.swing.JTextField();
        jButtonConsultaPessoa = new javax.swing.JButton();

        setBorder(null);
        setClosable(true);
        setForeground(java.awt.Color.white);
        setTitle("Relatório de Inadimplências por Cliente");
        setMaximumSize(null);
        setMinimumSize(null);

        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jLabelPessoa.setText("Cliente:");

        jTextFieldPessoa.setColumns(10);
        jTextFieldPessoa.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jButtonConsultaPessoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaPessoaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jTextFieldPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldPessoa))
                    .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(198, 198, 198))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaPessoa, jTextFieldPessoa});

        setBounds(0, 0, 490, 143);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed

        if (jTextFieldPessoa.getText().endsWith(",")) {
            jTextFieldPessoa.setText(jTextFieldPessoa.getText().substring(0, jTextFieldPessoa.getText().length() - 1));
        }

        //Abertura do diálogo de confirmação para o usuário
        int confirma = JOptionPane.showConfirmDialog(null, "Confirma a impressão?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (confirma == JOptionPane.YES_OPTION) {

            //Abertura da tela de carregamento
            TelaCarregamentoRelatorios telaCarregamento = new TelaCarregamentoRelatorios();
            jdp.add(telaCarregamento);
            telaCarregamento.setVisible(true);

            //Criação da thread que gera o relatório, que apesar de iniciada aguarda a execução da threadCarregamento
            Thread threadGerarRelatorio = new Thread() {
                public void run() {
                    try {
                        //Nesse momento a threadCarregamento é solicitada e a threadGerarRelatório é interrompida
                        //até que a threadCarregamento seja totalmente executada.
                        telaCarregamento.threadCarregamento.join();
                        //A threadGerarRelatorio fica 1 segundo "parada" para que o usuário observe que o relatório foi
                        //totalmente carregado
                        sleep(1000);
                        //Depois desse 1 segundo, a tela de carregamento é fechada, indicando o término total do carregamento
                        //do relatório
                        telaCarregamento.dispose();

                        //Imprimindo o relatório
                        //String caminhoRelatorio = System.getProperty("user.dir") + "/JasperReports/RelatorioInadimplenciasCliente.jasper";/*"C:\\Users\\leand\\JaspersoftWorkspace\\MyReports\\RelatorioProdutos.jasper";*/
                        //Caminho absoluto comentado para utilizar o caminho relativo que pega os arquivo da pasta src do projeto          
                        //Caminho relativo
                        InputStream caminhoRelatorio = getClass().getResourceAsStream("/relatorios/RelatorioInadimplenciasCliente.jasper");
                        JasperPrint jasperPrint = null;

                        //Lista com os parametros para o relátorio
                        HashMap parametros = new HashMap<>();

                        //Passando parâmetros e convertendo os dados pra ser compativel
                        String parametro = "SELECT PESSOA.ID AS IDCLIENTE, PESSOA.ID || ' - ' ||PESSOA.NOMERAZAOSOCIAL AS IDNOMEPESSOA\n"
                                + "FROM PESSOA\n"
                                + "INNER JOIN contaRECEBER ON CONTARECEBER.idpessoa = PESSOA.ID\n"
                                + "INNER JOIN PARCELACONTARECEBER ON PARCELACONTARECEBER.idcontareceber = CONTARECEBER.ID\n"
                                + "WHERE PARCELACONTARECEBER.VENCIMENTO < CURRENT_DATE AND PARCELACONTARECEBER.QUITADA = 'N' AND ";

                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametro = parametro + "PESSOA.ID IN (" + jTextFieldPessoa.getText() + ") AND ";
                        }

                        parametro = parametro + "0=0 ";

                        parametro = parametro + "GROUP BY IDCLIENTE, NOMERAZAOSOCIAL";

                        parametros.put("SQL", parametro);

                        //Caminho relativo do sub relatório                      
                        URL caminhoSubRelatorio = getClass().getResource("/relatorios/subrelatorios/SubRelatorioInadimplenciasCliente.jasper");
                                               
                        parametros.put("SUBREPORT_DIR", caminhoSubRelatorio); 

                        parametros.put("IDCLIENTE", jTextFieldPessoa.getText());

                        System.out.println("PRINTA AI SQL = " + parametro);
                        try {
                            jasperPrint = JasperFillManager.fillReport(caminhoRelatorio, parametros, Conexao.getConexao());
                        } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(rootPane, "Erro ao gerar o relatório - " + e);
                        }

                        //Relatório finalmente é exibido na tela para o usuário
                        JasperViewer jv = new JasperViewer(jasperPrint, false);
                        URL iconReportURL = getClass().getResource("/icones/relatorio.png");
                        ImageIcon icon = new ImageIcon(iconReportURL);
                        jv.setIconImage(icon.getImage());
                        jv.setTitle("Relatório");
                        jv.setVisible(true);

                    } catch (InterruptedException ex) {
                        Logger.getLogger(TelaRelatorioInadimplenciasCliente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            telaCarregamento.threadCarregamento.start();
            threadGerarRelatorio.start();
        }
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jButtonConsultaPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaPessoaActionPerformed
        new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Cliente para Relatório",
                DaoPessoa.SQLPESQUISARCLIENTES,
                new String[]{"Código", "Nome", "CPF/CNPJ", "Cidade", "Situação"},
                new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                    new FiltroPesquisa("Nome", "NOMERAZAOSOCIAL", String.class),
                    new FiltroPesquisa("CPF/CNPJ", "CPFCNPJ", String.class),
                    new FiltroPesquisa("Cidade", "CIDADE", String.class),
                    new FiltroPesquisa("Situação", "ATIVO", String.class)
                },
                new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new RenderizadorTexto(),
                    new RenderizadorTexto(), new RenderizadorTexto()
                },
                this, this, false, false, false)
        );
    }//GEN-LAST:event_jButtonConsultaPessoaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConsultaPessoa;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JLabel jLabelPessoa;
    public javax.swing.JTextField jTextFieldPessoa;
    // End of variables declaration//GEN-END:variables

}
