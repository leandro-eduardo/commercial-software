/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas_relatorios;

import bd.Conexao;
import componentes.FiltroPesquisa;
import dao.DaoCategoria;
import dao.DaoFabricante;
import dao.DaoProduto;
import java.io.InputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.DefaultTableCellRenderer;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import pojo.ParametrosConsulta;
import renderizador.InteiroRender;
import renderizador.InteiroRenderRight;
import renderizador.RenderizadorTexto;
import telas.TelaConsultaFiltro;
import telas.TelaSistema;
import static telas.TelaSistema.jdp;
import util.RestricaoCaracteresRelatorios;
import util.TelaCarregamentoRelatorios;

/**
 *
 * @author leand
 */
public class TelaRelatorioProduto extends javax.swing.JInternalFrame {

    public static TelaRelatorioProduto tela;

    public ParametrosConsulta parametrosConsulta;

    /**
     * Creates new form TelaRelatorioProduto1
     */
    public TelaRelatorioProduto() {
        initComponents();
        jTextFieldCodigo.setDocument(new RestricaoCaracteresRelatorios(100));
        setFrameIcon(new ImageIcon(this.getClass().getResource("/icones/relatorio.png")));
    }

    public static TelaRelatorioProduto getTela() {  //Estático para poder ser chamado de outras classes sem a necessidade de ter criado um objeto anteriormente.
        if (tela == null) {   //Tela não está aberta, pode criar uma nova tela
            tela = new TelaRelatorioProduto();
            tela.addInternalFrameListener(new InternalFrameAdapter() { //Adiciona um listener para verificar quando a tela for fechada, fazendo assim a remoção da mesma junto ao JDesktopPane da TelaSistema e setando a variável tela = null para permitir que a tela possa ser aberta novamente em outro momento. Basicamente o mesmo controle efetuado pela tela de pesquisa, porém de uma forma um pouco diferente.
                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    TelaSistema.jdp.remove(tela);
                    tela = null;
                }
            });
            TelaSistema.jdp.add(tela);
        }
        //Depois do teste acima, independentemente dela já existir ou não, ela é selecionada e movida para frente
        TelaSistema.jdp.setSelectedFrame(tela);
        TelaSistema.jdp.moveToFront(tela);
        return tela;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabelCodigo = new javax.swing.JLabel();
        jButtonImprimir = new javax.swing.JButton();
        jTextFieldCodigo = new javax.swing.JTextField();
        jLabelSitacao = new javax.swing.JLabel();
        jComboBoxSituacao = new javax.swing.JComboBox<>();
        jLabelOrdenar = new javax.swing.JLabel();
        jComboBoxOrdenar = new javax.swing.JComboBox<>();
        jButtonConsultaPessoa = new javax.swing.JButton();
        jLabelFabricante = new javax.swing.JLabel();
        jTextFieldFabricante = new javax.swing.JTextField();
        jButtonConsultaFabricante = new javax.swing.JButton();
        jLabelCategoria = new javax.swing.JLabel();
        jTextFieldCategoria = new javax.swing.JTextField();
        jButtonConsultaCategoria = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setBorder(null);
        setClosable(true);
        setForeground(java.awt.Color.white);
        setTitle("Relatório de Produtos");
        setMaximumSize(null);
        setMinimumSize(null);

        jLabelCodigo.setText("Código:");

        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jTextFieldCodigo.setColumns(10);
        jTextFieldCodigo.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jLabelSitacao.setText("Situação:");

        jComboBoxSituacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Ativo", "Inativo" }));

        jLabelOrdenar.setText("Ordenar:");

        jComboBoxOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Qtde", "Valor de Custo", "Valor de Venda", "Diferença", "Margem de Lucro" }));
        jComboBoxOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrdenarActionPerformed(evt);
            }
        });

        jButtonConsultaPessoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaPessoaActionPerformed(evt);
            }
        });

        jLabelFabricante.setText("Fabricante:");

        jTextFieldFabricante.setColumns(10);
        jTextFieldFabricante.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jButtonConsultaFabricante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaFabricante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaFabricanteActionPerformed(evt);
            }
        });

        jLabelCategoria.setText("Categoria:");

        jTextFieldCategoria.setColumns(10);
        jTextFieldCategoria.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jButtonConsultaCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaCategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSitacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(401, 401, 401))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabelCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelFabricante, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jComboBoxSituacao, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBoxOrdenar, javax.swing.GroupLayout.Alignment.LEADING, 0, 133, Short.MAX_VALUE)))
                                .addGap(0, 0, 0)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonConsultaFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonConsultaCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(39, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextFieldCodigo)
                        .addComponent(jLabelCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButtonConsultaPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldFabricante)
                    .addComponent(jLabelFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConsultaFabricante, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCategoria)
                    .addComponent(jLabelCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConsultaCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSituacao))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelOrdenar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxOrdenar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaPessoa, jTextFieldCodigo});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaCategoria, jTextFieldCategoria});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaFabricante, jTextFieldFabricante});

        setBounds(0, 0, 490, 297);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed

        //verifica se o último dígito dos campos é uma virgula. Se for, ela é removida para não dar conflito com a String do SQL
        if (jTextFieldCodigo.getText().endsWith(",")) {
            jTextFieldCodigo.setText(jTextFieldCodigo.getText().substring(0, jTextFieldCodigo.getText().length() - 1));
        }
        //Abertura do diálogo de confirmação para o usuário
        int confirma = JOptionPane.showConfirmDialog(null, "Confirma a impressão?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (confirma == JOptionPane.YES_OPTION) {

            //Abertura da tela de carregamento
            TelaCarregamentoRelatorios telaCarregamento = new TelaCarregamentoRelatorios();
            jdp.add(telaCarregamento);
            telaCarregamento.setVisible(true);

            //Criação da thread que gera o relatório, que apesar de iniciada aguarda a execução da threadCarregamento
            Thread threadGerarRelatorio = new Thread() {
                public void run() {
                    try {
                        //Nesse momento a threadCarregamento é solicitada e a threadGerarRelatório é interrompida
                        //até que a threadCarregamento seja totalmente executada.
                        telaCarregamento.threadCarregamento.join();
                        //A threadGerarRelatorio fica 1 segundo "parada" para que o usuário observe que o relatório foi
                        //totalmente carregado
                        sleep(1000);
                        //Depois desse 1 segundo, a tela de carregamento é fechada, indicando o término total do carregamento
                        //do relatório
                        telaCarregamento.dispose();
                        //Imprimindo o relatório

                        //Caminho absoluto comentado para utilizar o caminho relativo que pega os arquivo da pasta src do projeto
                        //String caminhoRelatorio = System.getProperty("user.dir") + "/JasperReports/RelatorioProdutos.jasper";/*"C:\\Users\\leand\\JaspersoftWorkspace\\MyReports\\RelatorioProdutos.jasper";*/
                        
                        //Caminho relativo
                        InputStream caminhoRelatorio = getClass().getResourceAsStream("/relatorios/RelatorioProdutos.jasper");
                        JasperPrint jasperPrint = null;

                        //Lista com os parametros para o relátorio
                        HashMap parametros = new HashMap<>();

                        //Passando parâmetros e convertendo os dados pra ser compativel
                        String parametro = "SELECT PRODUTO.ID, PRODUTO.NOME, QUANTIDADE, IDFABRICANTE, FABRICANTE.NOME AS FABRICANTENOME, IDCATEGORIA, CATEGORIA.NOME AS CATEGORIANOME, PRECOCOMPRA, PRECOVENDA,\n"
                                + "SUM (PRECOVENDA-PRECOCOMPRA) AS DIFERENCA,\n"
                                + "CAST(SUM(((PRECOVENDA-PRECOCOMPRA)/PRECOVENDA)*100) AS DECIMAL(2,2)) AS MARGEM, PRODUTO.ATIVO FROM PRODUTO\n"
                                + "INNER JOIN FABRICANTE ON FABRICANTE.ID = PRODUTO.IDFABRICANTE\n"
                                + "INNER JOIN CATEGORIA ON CATEGORIA.ID = PRODUTO.IDCATEGORIA WHERE ";

                        switch (jComboBoxSituacao.getSelectedIndex()) {
                            case 0:
                                parametro = parametro + "PRODUTO.ATIVO IN ('Ativo', 'Inativo') AND ";
                                break;
                            case 1:
                                parametro = parametro + "PRODUTO.ATIVO IN ('Ativo') AND ";
                                break;
                            default:
                                parametro = parametro + "PRODUTO.ATIVO IN ('Inativo') AND ";
                                break;
                        }

                        if (!jTextFieldCodigo.getText().trim().isEmpty()) {
                            parametro = parametro + " PRODUTO.ID IN (" + jTextFieldCodigo.getText() + ") AND ";
                        }

                        if (!jTextFieldFabricante.getText().trim().isEmpty()) {
                            parametro = parametro + " IDFABRICANTE IN (" + jTextFieldFabricante.getText() + ") AND ";
                        }

                        if (!jTextFieldCategoria.getText().trim().isEmpty()) {
                            parametro = parametro + " IDCATEGORIA IN (" + jTextFieldCategoria.getText() + ") AND ";
                        }

                        parametro = parametro + "0=0 ";
                        parametro = parametro + "GROUP BY PRODUTO.ID, PRODUTO.NOME, QUANTIDADE, IDFABRICANTE, FABRICANTENOME, IDCATEGORIA, CATEGORIANOME, PRECOCOMPRA, PRECOVENDA, PRODUTO.ATIVO";

                        switch (jComboBoxOrdenar.getSelectedIndex()) {
                            case 0:
                                parametro = parametro + " ORDER BY ID";
                                break;
                            case 1:
                                parametro = parametro + " ORDER BY QUANTIDADE";
                                break;
                            case 2:
                                parametro = parametro + " ORDER BY PRECOCOMPRA";
                                break;
                            case 3:
                                parametro = parametro + " ORDER BY PRECOVENDA";
                                break;
                            case 4:
                                parametro = parametro + " ORDER BY DIFERENCA";
                                break;
                            case 5:
                                parametro = parametro + " ORDER BY MARGEM";
                                break;
                        }

                        parametros.put("SQL", parametro);
                        parametros.put("ID", jTextFieldCodigo.getText());
                        parametros.put("IDFABRICANTE", jTextFieldFabricante.getText());
                        parametros.put("IDCATEGORIA", jTextFieldCategoria.getText());
                        parametros.put("ORDENACAO", jComboBoxOrdenar.getSelectedItem());
                        parametros.put("SITUACAO", jComboBoxSituacao.getSelectedItem());

                        System.out.println("PRINTA AI SQL = " + parametro);

                        try {
                            jasperPrint = JasperFillManager.fillReport(caminhoRelatorio, parametros, Conexao.getConexao());
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(rootPane, "Erro ao gerar o relatório - " + e);
                        }

                        //Relatório finalmente é exibido na tela para o usuário
                        JasperViewer jv = new JasperViewer(jasperPrint, false);
                        URL iconReportURL = getClass().getResource("/icones/relatorio.png");
                        ImageIcon icon = new ImageIcon(iconReportURL);
                        jv.setIconImage(icon.getImage());
                        jv.setTitle("Relatório");
                        jv.setVisible(true);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(TelaRelatorioProduto.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            };
            telaCarregamento.threadCarregamento.start();
            threadGerarRelatorio.start();
        }
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jComboBoxOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrdenarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxOrdenarActionPerformed

    private void jButtonConsultaPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaPessoaActionPerformed
        new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Produto para Relatório",
                DaoProduto.SQLPESQUISAR,
                new String[]{"Código", "Nome", "Quantidade", "Fabricante", "Categoria", "Situação"},
                new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                    new FiltroPesquisa("Nome", "PRODUTO_NOME", String.class),
                    new FiltroPesquisa("Quantidade", "PRODUTO_QUANTIDADE", String.class),
                    new FiltroPesquisa("Fabricante", "FABRICANTE_NOME", String.class),
                    new FiltroPesquisa("Categoria", "CATEGORIA_NOME", String.class),
                    new FiltroPesquisa("Situação", "ATIVO", String.class)
                },
                new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new InteiroRenderRight(),
                    new RenderizadorTexto(), new RenderizadorTexto(), new RenderizadorTexto()},
                this, this, false, false, false)
        );
    }//GEN-LAST:event_jButtonConsultaPessoaActionPerformed

    private void jButtonConsultaFabricanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaFabricanteActionPerformed
        new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Fabricante para Relatório",
                DaoFabricante.SQLPESQUISAR2,
                new String[]{"Código", "Nome", "Situação"},
                new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                    new FiltroPesquisa("Nome", "NOME", String.class),
                    new FiltroPesquisa("Situação", "ATIVO", String.class)
                },
                new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(),
                    new RenderizadorTexto()},
                this, this, false, false, false)
        );
    }//GEN-LAST:event_jButtonConsultaFabricanteActionPerformed

    private void jButtonConsultaCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaCategoriaActionPerformed
        new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Categoria para Relatório",
                DaoCategoria.SQLPESQUISAR2,
                new String[]{"Código", "Nome", "Situação"},
                new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                    new FiltroPesquisa("Nome", "NOME", String.class),
                    new FiltroPesquisa("Situação", "ATIVO", String.class)
                },
                new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(),
                    new RenderizadorTexto()},
                this, this, false, false, false)
        );
    }//GEN-LAST:event_jButtonConsultaCategoriaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConsultaCategoria;
    private javax.swing.JButton jButtonConsultaFabricante;
    private javax.swing.JButton jButtonConsultaPessoa;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JComboBox<String> jComboBoxOrdenar;
    private javax.swing.JComboBox<String> jComboBoxSituacao;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabelCategoria;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelFabricante;
    private javax.swing.JLabel jLabelOrdenar;
    private javax.swing.JLabel jLabelSitacao;
    public javax.swing.JTextField jTextFieldCategoria;
    public javax.swing.JTextField jTextFieldCodigo;
    public javax.swing.JTextField jTextFieldFabricante;
    // End of variables declaration//GEN-END:variables

}
