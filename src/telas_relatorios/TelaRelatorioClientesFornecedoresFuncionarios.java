/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas_relatorios;

import bd.Conexao;
import componentes.FiltroPesquisa;
import dao.DaoCidade;
import dao.DaoEstado;
import dao.DaoPessoa;
import java.io.InputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.DefaultTableCellRenderer;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import pojo.ParametrosConsulta;
import renderizador.InteiroRender;
import renderizador.RenderizadorTexto;
import telas.TelaConsultaFiltro;
import telas.TelaSistema;
import static telas.TelaSistema.jdp;
import util.RestricaoCaracteresRelatorios;
import util.TelaCarregamentoRelatorios;

/**
 *
 * @author leand
 */
public class TelaRelatorioClientesFornecedoresFuncionarios extends javax.swing.JInternalFrame {

    public static TelaRelatorioClientesFornecedoresFuncionarios tela;

    public ParametrosConsulta parametrosConsulta;

    /**
     * Creates new form TelaRelatorioProduto1
     */
    public TelaRelatorioClientesFornecedoresFuncionarios() {
        initComponents();
        jTextFieldPessoa.setDocument(new RestricaoCaracteresRelatorios(100));
        jTextFieldCidade.setDocument(new RestricaoCaracteresRelatorios(100));
        jTextFieldEstado.setDocument(new RestricaoCaracteresRelatorios(100));
        buttonGroup.add(jRadioButtonClientes);
        buttonGroup.add(jRadioButtonFornecedores);
        buttonGroup.add(jRadioButtonFuncionarios);
        setFrameIcon(new ImageIcon(this.getClass().getResource("/icones/relatorio.png")));
    }

    public static TelaRelatorioClientesFornecedoresFuncionarios getTela() {  //Estático para poder ser chamado de outras classes sem a necessidade de ter criado um objeto anteriormente.
        if (tela == null) {   //Tela não está aberta, pode criar uma nova tela
            tela = new TelaRelatorioClientesFornecedoresFuncionarios();
            tela.addInternalFrameListener(new InternalFrameAdapter() { //Adiciona um listener para verificar quando a tela for fechada, fazendo assim a remoção da mesma junto ao JDesktopPane da TelaSistema e setando a variável tela = null para permitir que a tela possa ser aberta novamente em outro momento. Basicamente o mesmo controle efetuado pela tela de pesquisa, porém de uma forma um pouco diferente.
                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    TelaSistema.jdp.remove(tela);
                    tela = null;
                }
            });
            TelaSistema.jdp.add(tela);
        }
        //Depois do teste acima, independentemente dela já existir ou não, ela é selecionada e movida para frente
        TelaSistema.jdp.setSelectedFrame(tela);
        TelaSistema.jdp.moveToFront(tela);
        return tela;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        buttonGroup = new javax.swing.ButtonGroup();
        jLabelCodigo = new javax.swing.JLabel();
        jButtonImprimir = new javax.swing.JButton();
        jTextFieldPessoa = new javax.swing.JTextField();
        jLabelSitacao = new javax.swing.JLabel();
        jComboBoxSituacao = new javax.swing.JComboBox<>();
        jLabelOrdenar = new javax.swing.JLabel();
        jComboBoxOrdenar = new javax.swing.JComboBox<>();
        jButtonConsultaCodigo = new javax.swing.JButton();
        jLabelCidade = new javax.swing.JLabel();
        jTextFieldCidade = new javax.swing.JTextField();
        jLabelEstado = new javax.swing.JLabel();
        jTextFieldEstado = new javax.swing.JTextField();
        jButtonConsultaCidade = new javax.swing.JButton();
        jButtonConsultaEstado = new javax.swing.JButton();
        jRadioButtonFornecedores = new javax.swing.JRadioButton();
        jRadioButtonClientes = new javax.swing.JRadioButton();
        jRadioButtonFuncionarios = new javax.swing.JRadioButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setBorder(null);
        setClosable(true);
        setForeground(java.awt.Color.white);
        setTitle("Relatório de Clientes/Fornecedores/Funcionários");
        setMaximumSize(null);
        setMinimumSize(null);

        jLabelCodigo.setText("Código:");

        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jTextFieldPessoa.setColumns(10);
        jTextFieldPessoa.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jLabelSitacao.setText("Situação:");

        jComboBoxSituacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Ativo", "Inativo" }));

        jLabelOrdenar.setText("Ordenar:");

        jComboBoxOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Nome", "Cidade", "Estado", "Situação" }));
        jComboBoxOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrdenarActionPerformed(evt);
            }
        });

        jButtonConsultaCodigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaCodigoActionPerformed(evt);
            }
        });

        jLabelCidade.setText("Cidade:");

        jTextFieldCidade.setColumns(10);
        jTextFieldCidade.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jLabelEstado.setText("Estado:");

        jTextFieldEstado.setColumns(10);
        jTextFieldEstado.setToolTipText("Para filtar por mais de um código, utilize vírgula como separador. Ex: (1, 2, 3)");

        jButtonConsultaCidade.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaCidadeActionPerformed(evt);
            }
        });

        jButtonConsultaEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/search.png"))); // NOI18N
        jButtonConsultaEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultaEstadoActionPerformed(evt);
            }
        });

        jRadioButtonFornecedores.setText("Fornecedores");
        jRadioButtonFornecedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFornecedoresActionPerformed(evt);
            }
        });

        jRadioButtonClientes.setText("Clientes");
        jRadioButtonClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonClientesActionPerformed(evt);
            }
        });

        jRadioButtonFuncionarios.setText("Funcionários");
        jRadioButtonFuncionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFuncionariosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jButtonConsultaCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(jButtonConsultaCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jButtonConsultaEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelSitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBoxSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabelOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBoxOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jRadioButtonClientes)
                .addGap(15, 15, 15)
                .addComponent(jRadioButtonFornecedores)
                .addGap(15, 15, 15)
                .addComponent(jRadioButtonFuncionarios)
                .addGap(109, 109, 109))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonClientes)
                    .addComponent(jRadioButtonFornecedores)
                    .addComponent(jRadioButtonFuncionarios))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldPessoa)
                        .addComponent(jButtonConsultaCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldCidade)
                        .addComponent(jButtonConsultaCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonConsultaEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jButtonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaCodigo, jTextFieldPessoa});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaCidade, jTextFieldCidade});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonConsultaEstado, jTextFieldEstado});

        setBounds(0, 0, 490, 320);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed

        if (!jRadioButtonClientes.isSelected() && !jRadioButtonFornecedores.isSelected() && !jRadioButtonFuncionarios.isSelected()) {
            JOptionPane.showMessageDialog(null, "Selecione o tipo do relatório.");
            jRadioButtonClientes.requestFocus();
            return;
        }
        //verifica se o último dígito dos campos é uma virgula. Se for, ela é removida para não dar conflito com a String do SQL
        if (jTextFieldPessoa.getText().endsWith(",")) {
            jTextFieldPessoa.setText(jTextFieldPessoa.getText().substring(0, jTextFieldPessoa.getText().length() - 1));
        }
        if (jTextFieldCidade.getText().endsWith(",")) {
            jTextFieldCidade.setText(jTextFieldCidade.getText().substring(0, jTextFieldCidade.getText().length() - 1));
        }
        if (jTextFieldEstado.getText().endsWith(",")) {
            jTextFieldEstado.setText(jTextFieldEstado.getText().substring(0, jTextFieldEstado.getText().length() - 1));
        }

        //Abertura do diálogo de confirmação para o usuário
        int confirma = JOptionPane.showConfirmDialog(null, "Confirma a impressão?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (confirma == JOptionPane.YES_OPTION) {
            //Abertura da tela de carregamento
            TelaCarregamentoRelatorios telaCarregamento = new TelaCarregamentoRelatorios();
            jdp.add(telaCarregamento);
            telaCarregamento.setVisible(true);

            //Criação da thread que gera o relatório, que apesar de iniciada aguarda a execução da threadCarregamento
            Thread threadGerarRelatorio = new Thread() {
                public void run() {
                    try {
                        //Nesse momento a threadCarregamento é solicitada e a threadGerarRelatório é interrompida
                        //até que a threadCarregamento seja totalmente executada.
                        telaCarregamento.threadCarregamento.join();
                        //A threadGerarRelatorio fica 1 segundo "parada" para que o usuário observe que o relatório foi
                        //totalmente carregado
                        sleep(1000);
                        //Depois desse 1 segundo, a tela de carregamento é fechada, indicando o término total do carregamento
                        //do relatório
                        telaCarregamento.dispose();

                        //Imprimindo o relatório
                        //Caminho absoluto comentado para utilizar o caminho relativo que pega os arquivo da pasta src do projeto
                        //String caminhoRelatorio = System.getProperty("user.dir") + "/JasperReports/RelatorioPessoas.jasper";/*"C:\\Users\\leand\\JaspersoftWorkspace\\MyReports\\RelatorioProdutos.jasper";*/

                         //Caminho relativo
                        InputStream caminhoRelatorio = getClass().getResourceAsStream("/relatorios/RelatorioPessoas.jasper");
                        JasperPrint jasperPrint = null;

                        //Lista com os parametros para o relátorio
                        HashMap parametros = new HashMap<>();

                        //Passando parâmetros e convertendo os dados pra ser compativel
                        String parametro = "SELECT PESSOA.ID, PESSOA.NOMERAZAOSOCIAL, PESSOA.TIPO, PESSOA.CPFCNPJ, PESSOA.DATANASCIMENTO, PESSOA.RGIE, PESSOA.SEXO, PESSOA.ATIVO,\n"
                                + "ESTADO.ID AS IDESTADO, ESTADO.SIGLA AS ESTADO, CIDADE.NOME AS CIDADE, PESSOA.ENDERECO, PESSOA.BAIRRO, PESSOA.NUMERO, PESSOA.COMPLEMENTO,  PESSOA.CEP, PAIS.NOME AS PAIS, PESSOA.FONE1, PESSOA.FONE2, PESSOA.EMAIL\n"
                                + "FROM PESSOA\n"
                                + "INNER JOIN CIDADE ON CIDADE.ID = PESSOA.IDCIDADE\n"
                                + "INNER JOIN ESTADO ON  ESTADO.ID = CIDADE.IDESTADO\n"
                                + "INNER JOIN PAIS ON PAIS.ID = ESTADO.IDPAIS\n";

                        if (jRadioButtonClientes.isSelected()) {
                            parametro = parametro + "WHERE ECLIENTE = 'S' AND ";
                            parametros.put("TITULO", "RELATÓRIO DE CLIENTES");
                        } else if (jRadioButtonFornecedores.isSelected()) {
                            parametro = parametro + "WHERE EFORNECEDOR = 'S' AND ";
                            parametros.put("TITULO", "RELATÓRIO DE FORNECEDORES");
                        } else {
                            parametro = parametro + "WHERE EFUNCIONARIO= 'S' AND ";
                            parametros.put("TITULO", "RELATÓRIO DE FUNCIONÁRIOS");
                        }
                        if (!jTextFieldPessoa.getText().trim().isEmpty()) {
                            parametro = parametro + " PESSOA.ID IN (" + jTextFieldPessoa.getText() + ") AND ";
                        }

                        if (!jTextFieldCidade.getText().trim().isEmpty()) {
                            parametro = parametro + " PESSOA.IDCIDADE IN (" + jTextFieldCidade.getText() + ") AND ";
                        }

                        if (!jTextFieldEstado.getText().trim().isEmpty()) {
                            parametro = parametro + " IDESTADO IN (" + jTextFieldEstado.getText() + ") AND ";
                        }

                        if (jComboBoxSituacao.getSelectedIndex() == 0) {
                            parametro = parametro + "PESSOA.ATIVO IN ('Ativo', 'Inativo') AND ";
                        } else if (jComboBoxSituacao.getSelectedIndex() == 1) {
                            parametro = parametro + "PESSOA.ATIVO IN ('Ativo') AND ";
                        } else {
                            parametro = parametro + "PESSOA.ATIVO IN ('Inativo') AND ";
                        }

                        parametro = parametro + "0=0";

                        switch (jComboBoxOrdenar.getSelectedIndex()) {
                            case 0:
                                parametro = parametro + " ORDER BY ID";
                                break;
                            case 1:
                                parametro = parametro + " ORDER BY NOMERAZAOSOCIAL";
                                break;
                            case 2:
                                parametro = parametro + " ORDER BY CIDADE";
                                break;
                            case 3:
                                parametro = parametro + " ORDER BY ESTADO";
                                break;
                            case 4:
                                parametro = parametro + " ORDER BY ATIVO";
                                break;
                        }

                        parametros.put("SQL", parametro);
                        parametros.put("ID", jTextFieldPessoa.getText());
                        parametros.put("ORDENACAO", jComboBoxOrdenar.getSelectedItem());
                        parametros.put("SITUACAO", jComboBoxSituacao.getSelectedItem());
                        parametros.put("CIDADE", jTextFieldCidade.getText());
                        parametros.put("ESTADO", jTextFieldEstado.getText());
                        System.out.println("PRINTA AI SQL = " + parametro);

                        try {
                            jasperPrint = JasperFillManager.fillReport(caminhoRelatorio, parametros, Conexao.getConexao());
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(rootPane, "Erro ao gerar o relatório - " + e);
                        }

                        //Relatório finalmente é exibido na tela para o usuário
                        JasperViewer jv = new JasperViewer(jasperPrint, false);
                        URL iconReportURL = getClass().getResource("/icones/relatorio.png");
                        ImageIcon icon = new ImageIcon(iconReportURL);
                        jv.setIconImage(icon.getImage());
                        jv.setTitle("Relatório");
                        jv.setVisible(true);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(TelaRelatorioClientesFornecedoresFuncionarios.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            };
            telaCarregamento.threadCarregamento.start();
            threadGerarRelatorio.start();
        }
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jComboBoxOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrdenarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxOrdenarActionPerformed

    private void jButtonConsultaCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaCodigoActionPerformed
        if (jRadioButtonClientes.isSelected()) {
            new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Cliente para Relatório",
                    DaoPessoa.SQLPESQUISARCLIENTES,
                    new String[]{"Código", "Nome", "CPF/CNPJ", "Cidade", "Situação"},
                    new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                        new FiltroPesquisa("Nome", "NOMERAZAOSOCIAL", String.class),
                        new FiltroPesquisa("CPF/CNPJ", "CPFCNPJ", String.class),
                        new FiltroPesquisa("Cidade", "CIDADE", String.class),
                        new FiltroPesquisa("Situação", "ATIVO", String.class)
                    },
                    new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new RenderizadorTexto(),
                        new RenderizadorTexto(), new RenderizadorTexto()
                    },
                    this, this, false, false, false)
            );
        } else if (jRadioButtonFornecedores.isSelected()) {
            new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Fornecedor para Relatório",
                    DaoPessoa.SQLPESQUISARFORNECEDORES,
                    new String[]{"Código", "Nome", "CPF/CNPJ", "Cidade", "Situação"},
                    new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                        new FiltroPesquisa("Nome", "NOMERAZAOSOCIAL", String.class),
                        new FiltroPesquisa("CPF/CNPJ", "CPFCNPJ", String.class),
                        new FiltroPesquisa("Cidade", "CIDADE", String.class),
                        new FiltroPesquisa("Situação", "ATIVO", String.class)
                    },
                    new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new RenderizadorTexto(),
                        new RenderizadorTexto(), new RenderizadorTexto()
                    },
                    this, this, false, false, false)
            );
        } else if (jRadioButtonFuncionarios.isSelected()) {
            new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Funcionário para Relatório",
                    DaoPessoa.SQLPESQUISARFUNCIONARIOS,
                    new String[]{"Código", "Nome", "CPF/CNPJ", "Cidade", "Situação"},
                    new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                        new FiltroPesquisa("Nome", "NOMERAZAOSOCIAL", String.class),
                        new FiltroPesquisa("CPF/CNPJ", "CPFCNPJ", String.class),
                        new FiltroPesquisa("Cidade", "CIDADE", String.class),
                        new FiltroPesquisa("Situação", "ATIVO", String.class)
                    },
                    new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(), new RenderizadorTexto(),
                        new RenderizadorTexto(), new RenderizadorTexto()
                    },
                    this, this, false, false, false)
            );
        } else {
            JOptionPane.showMessageDialog(null, "Selecione o tipo do relatório.");
            jRadioButtonClientes.requestFocus();
        }

    }//GEN-LAST:event_jButtonConsultaCodigoActionPerformed

    private void jButtonConsultaCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaCidadeActionPerformed
        new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Cidade para Relatório",
                DaoCidade.SQLPESQUISAR,
                new String[]{"Código", "Nome", "Estado", "Situação"},
                new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                    new FiltroPesquisa("Nome", "NOME", String.class),
                    new FiltroPesquisa("Estado", "ESTADO_NOME", String.class),
                    new FiltroPesquisa("Situação", "ATIVO", String.class)
                },
                new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(),
                    new RenderizadorTexto(), new RenderizadorTexto()},
                this, this, false, false, false)
        );
    }//GEN-LAST:event_jButtonConsultaCidadeActionPerformed

    private void jButtonConsultaEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultaEstadoActionPerformed
        new TelaConsultaFiltro(parametrosConsulta = new ParametrosConsulta("Consulta de Estado para Relatório",
                DaoEstado.SQLPESQUISAR,
                new String[]{"Código", "Nome", "Sigla", "País", "Situação"},
                new FiltroPesquisa[]{new FiltroPesquisa("Código", "ID", String.class),
                    new FiltroPesquisa("Nome", "ESTADO_NOME", String.class),
                    new FiltroPesquisa("Sigla", "SIGLA", String.class),
                    new FiltroPesquisa("País", "PAIS_NOME", String.class),
                    new FiltroPesquisa("Situação", "ATIVO", String.class)
                },
                new DefaultTableCellRenderer[]{new InteiroRender(), new RenderizadorTexto(),
                    new RenderizadorTexto(), new RenderizadorTexto(), new RenderizadorTexto()},
                this, this, false, false, false)
        );
    }//GEN-LAST:event_jButtonConsultaEstadoActionPerformed

    private void jRadioButtonClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonClientesActionPerformed
        jTextFieldPessoa.setText("");
    }//GEN-LAST:event_jRadioButtonClientesActionPerformed

    private void jRadioButtonFornecedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFornecedoresActionPerformed
        jTextFieldPessoa.setText("");
    }//GEN-LAST:event_jRadioButtonFornecedoresActionPerformed

    private void jRadioButtonFuncionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFuncionariosActionPerformed
        jTextFieldPessoa.setText("");
    }//GEN-LAST:event_jRadioButtonFuncionariosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton jButtonConsultaCidade;
    private javax.swing.JButton jButtonConsultaCodigo;
    private javax.swing.JButton jButtonConsultaEstado;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JComboBox<String> jComboBoxOrdenar;
    private javax.swing.JComboBox<String> jComboBoxSituacao;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabelCidade;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelEstado;
    private javax.swing.JLabel jLabelOrdenar;
    private javax.swing.JLabel jLabelSitacao;
    private javax.swing.JRadioButton jRadioButtonClientes;
    private javax.swing.JRadioButton jRadioButtonFornecedores;
    private javax.swing.JRadioButton jRadioButtonFuncionarios;
    public javax.swing.JTextField jTextFieldCidade;
    public javax.swing.JTextField jTextFieldEstado;
    public javax.swing.JTextField jTextFieldPessoa;
    // End of variables declaration//GEN-END:variables

}
